#!/usr/bin/env python
# encoding: utf-8
"""
GMMBarTracker bar tracking algorithm.

"""

from __future__ import absolute_import, division, print_function

import sys
import argparse

from madmom.processors import ParallelProcessor, IOProcessor, io_arguments
from madmom.audio.signal import SignalProcessor
from madmom.features.downbeats import (DownbeatFeatureProcessor,
                                       BeatSyncProcessor, GMMBarProcessor,
                                       LoadBeatsProcessor)
from madmom.models import DOWNBEATS_GMM


def main():
    """GMMBarTracker"""

    # define parser
    p = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter, description='''
    The GMMBarTracker program detects all downbeats in an audio file given the
    beat positions.

    ''')
    # version
    p.add_argument('--version', action='version',
                   version='GMMBarTracker.2016')
    # input/output options
    io_arguments(p, output_suffix='.downbeats.txt', online=True)
    p.add_argument('--beats', type=argparse.FileType('b'),
                   default=sys.stdin,
                   help='where/how to read the beat positions from [defaults: '
                        'online: STDIN, single: STDIN, batch: .beats.txt]')

    # signal processing arguments
    SignalProcessor.add_arguments(p, norm=False, gain=0)
    # tracking arguments
    GMMBarProcessor.add_arguments(p)

    # parse arguments
    args = p.parse_args()

    # set immutable arguments
    args.fps = 100

    # beats processor
    if args.online:
        # online mode: read the beats from STDIN frame-by-frame
        beats_processor = LoadBeatsProcessor(**vars(args))
    elif hasattr(args, 'infile'):
        # single mode: read the beats from STDIN all at once
        beats_processor = LoadBeatsProcessor(**vars(args))
    elif hasattr(args, 'files'):
        # batch mode: load the beats from file
        if args.beats == sys.stdin:
            args.beats = '.beats.txt'
        beats_processor = LoadBeatsProcessor(args.files, suffix=args.beats)
        # remove the beats files from the list of files to be processed
        args.files = list(set(args.files) - set(beats_processor.beats))

    # print arguments
    if args.verbose:
        print(args)

    # downbeat features
    downbeats_processor = DownbeatFeatureProcessor(**vars(args))
    # combine the beats and downbeat features
    feat_processor = ParallelProcessor([beats_processor, downbeats_processor])
    # sync the features to the beats
    beat_sync = BeatSyncProcessor(**vars(args))
    # score them with a GMM
    gmm_bar_processor = GMMBarProcessor(pattern_files=DOWNBEATS_GMM,
                                        pattern_change_prob=0.001,
                                        **vars(args))
    # output handler
    if args.online:
        # simply output the given string
        from madmom.utils import write_output as writer
    elif args.downbeats:
        # simply write the timestamps of the downbeats
        from madmom.utils import write_events as writer
    else:
        # borrow the note writer for outputting timestamps + beat numbers
        from madmom.features.notes import write_notes as writer

    # create an IOProcessor
    processor = IOProcessor([feat_processor, beat_sync, gmm_bar_processor],
                            writer)

    # and call the processing function
    args.func(processor, **vars(args))


if __name__ == '__main__':
    main()
